{"name":"Angular-progressbar","tagline":"Progressbar.js support for AngularJS http://kimmobrunfeldt.github.io/progressbar.js/","body":"# How to...\r\n\r\n## Setup JavaScript\r\n\r\nOn JavaScript, add the module as a dependency: \r\n``` JavaScript\r\nangular.module('demo', ['angularProgressbar']);\r\n```\r\n\r\n## Setup HTML\r\n\r\nOn HTML, add the corresponding directive tag e.g.:\r\n``` HTML\r\n<!-- element form works -->\r\n<pb-line progress-key=\"myLine\"></pb-line>\r\n<pb-circle progress-key=\"myCircle\"></pb-circle>\r\n<pb-square progress-key=\"mySquare\"></pb-square>\r\n<pb-path progress-key=\"myPath\"></pb-path>\r\n<!-- attribute form works too -->\r\n<div pb-circle progress-key=\"myCircleDiv\"></div>\r\n<!-- I believe all forms work -->\r\n```\r\n\r\nThe `progress-key` parameter is required.\r\n\r\n## Passing _options_ to directive\r\n\r\nSo far, to pass options you do the flowing, on the controller set a variable in the $scope to use as the options. In my case I named it options so I set `$scope.options`. You can set, say, `$scope.circleOptions` if you wish.\r\n\r\n```JavaScript\r\nangular.module('demo', ['angularProgressbar'])\r\n.controller('demoCtrl', ['$scope', '$pbService',  \r\n\t\t\t\tfunction( $scope,   $pbService ){\r\n\t$scope.options = {\r\n\t\tcolor: '#FCB03C',\r\n\t\tduration: 3000,\r\n\t\teasing: 'easeInOut'};\r\n\t$scope.circleOptions = {\r\n\t\tcolor: '#FCBB33',\r\n\t\tduration: 2000,\r\n\t\teasing: 'easeInOut'};\r\n}]);\r\n```\r\n\r\nIn the HTML you add an attribute called `options` and you put the scope variable as the value. \r\n\r\n```HTML\r\n<pb-line progress-key=\"myLine\" options=\"options\"></pb-line>\r\n<!--  or, if your variable is called 'lineOptions' in your scope then -->\\\r\n<pb-circle progress-key=\"myLine\" options=\"circleOptions\"></pb-circle>\r\n```\r\n\r\n## `animate`, `set`, or `stop`\r\n\r\nTurns out that you can handle the animate, set or stop through the controller, e.g.: \r\n\r\n### Javascript\r\n\r\n```JavaScript\r\nangular.module('demo', ['angularProgressbar'])\r\n.controller('demoCtrl', ['$scope', '$pbService', '$timeout',  \r\n\t\t\t\tfunction( $scope,   $pbService,   $timeout ){\r\n\t$scope.options = {\r\n\t\tcolor: '#FCB03C',\r\n\t\tduration: 3000,\r\n\t\teasing: 'easeInOut'\r\n\t};\r\n\t$scope.lineProgress = 0;\r\n\r\n\t$scope.animateLine = function(){\r\n\t\t$scope.lineProgress = $scope.lineProgress + .05; \r\n\t\t$pbService.animate('myLine', $scope.lineProgress, $scope.options);\r\n\t};\r\n\t$scope.setLine = function(){ \r\n\t\t$scope.lineProgress = $scope.lineProgress + .05; \r\n\t\t$pbService.set('myCircle', $scope.lineProgress);\r\n\t};\r\n\t$timeout(function() {\r\n        $scope.setLine();\r\n        $scope.animateLine();\r\n        console.log('update progress bar')\r\n    }, 3000);\r\n}]);\r\n```\r\n\r\n### HTML\r\n\r\n```html\r\n<body ng-app=\"demo\" ng-controller=\"demoCtrl\">\r\n    <div class=\"container\">\r\n        <h2>angular-progressbar.js samples</h2>\r\n        <button ng-click=\"animateLine()\">animate line to +5%s</button>\r\n        <button ng-click=\"setLine()\">set line to +5%s</button> Current progress value: {{lineProgress}}\r\n        <div class=\"width\">\r\n<pb-line progress-key=\"myLine\" options='options'></pb-line>\r\n<pb-circle progress-key=\"myCircle\"></pb-circle>\r\n        </div>\r\n    </div>\r\n</body>\r\n```\r\n## Event `set` is broken\r\nPlease note that the event `set` is currently broken because of line [30](https://github.com/felipecamposclarke/angular-progressbar/blob/master/angular-progressbar.js#L30).\r\n```JavaScript\r\n$rootScope.$broadcast('progressbar:stop', key, progress);\r\n```\r\nsould be\r\n```JS\r\n$rootScope.$broadcast('progressbar:set', key, progress);\r\n```\r\n\r\nFiddle coming soon...","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}